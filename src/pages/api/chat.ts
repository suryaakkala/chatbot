import formidable, { Fields, Files } from 'formidable';
import { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';
import fs from 'fs';
import FormData from 'form-data';

export const config = {
  api: {
    bodyParser: false, // Disable bodyParser to handle files
  },
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === 'POST') {
    const form = formidable();

    form.parse(req, async (err, fields: Fields, files: Files) => {
      if (err) {
        console.error('Error parsing form:', err);
        res.status(500).json({ error: 'Failed to parse form' });
        return;
      }

      try {
        const type = fields.type?.toString() || 'text';
        const prompt = fields.prompt?.toString() || '';

        const formData = new FormData();

        // If there's a file, attach it to the formData
        if (files.file) {
          const file = Array.isArray(files.file) ? files.file[0] : files.file;
          if (file) {
            const filename = file.originalFilename || 'unknown-file'; // Use a default filename if originalFilename is null
            formData.append('file', fs.createReadStream(file.filepath), filename);
          }
        }

        // Append other fields to formData
        formData.append('type', type);
        formData.append('prompt', prompt);

        const apiResponse = await axios.post('http://127.0.0.1:5000/chat', formData, {
          headers: formData.getHeaders(), // Use headers generated by form-data
        });

        const { type: responseType, responce, audioUrl } = apiResponse.data;

        res.status(200).json({
          type: responseType,
          response: responce,
          audioUrl,
        });
      } catch (error) {
        console.error('Error communicating with backend:', error);
        res.status(500).json({ error: 'Error communicating with backend API' });
      }
    });
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
